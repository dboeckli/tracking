services:
  kafka:
    image: confluentinc/cp-kafka:7.9.4
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9093:9093"
    expose:
      - 9092
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"  # Defines the controller voters.
      # see: https://issues.apache.org/jira/si/jira.issueviews:issue-html/KAFKA-18281/KAFKA-18281.html
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # first is for internal communication, second for external communication which is exposing the port 29092 (see above in KAFKA_LISTENERS)
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since weâ€™re running one broker, one replica is enough.
      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk_TRACKING"
      #volumes:
      # Diese Zeile definiert ein Volume-Mapping. Es verbindet das ./kafka-data-Verzeichnis auf dem Host-System mit dem /var/lib/kafka/data-Verzeichnis im Kafka-Container.
      #- kafka_data:/var/lib/kafka/data  # Store Kafka logs on your local machine.  
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 10

  wiremock:
    image: wiremock/wiremock:3.13.1
    container_name: wiremock
    ports:
      - "8888:8080"
    expose:
      - 8888
    command: --global-response-templating --disable-gzip --verbose
    volumes:
      - ./wiremock/mappings:/home/wiremock/mappings

  dispatch-service:
    container_name: dispatch-service
    image: domboeckli/dispatch:0.0.2-SNAPSHOT
    ports:
      - "8082:8082"
    expose:
      - 8082
    environment:
      SERVER_PORT: 8082
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      SPRING_KAFKA_CONSUMER_BOOTSTRAP-SERVERS: kafka:9092
      DISPATCH_STOCKSERVICEENDPOINT: http://wiremock:8080/api/stock
    depends_on:
      kafka:
        condition: service_healthy
        required: true

  busybox:
    image: busybox:1.37.0
    container_name: busybox
    depends_on:
      wiremock:
        condition: service_started
        required: true
      dispatch-service:
        condition: service_started
        required: true
    healthcheck:
      test: [ "CMD", "sh", "-c", "
            echo 'Checking BusyBox readiness...' &&
            test -f /bin/sh &&
            wget -qO- http://wiremock:8080/actuator/health/readiness | grep -q '\"status\":\"UP\"' &&
            wget -qO- http://dispatch-service:8082/actuator/health/readiness | grep -q '\"status\":\"UP\"'
          " ]
      interval: 10s
      timeout: 5s
      retries: 10
    command: >
      /bin/sh -c '
      while true; do
        wiremock_health=$$(wget -q -O - http://wiremock:8080/actuator/health/readiness 2>/dev/null)
        dispatch_service_health=$$(wget -q -O - http://dispatch-service:8082/actuator/health/readiness 2>/dev/null)

        echo "{
          \"timestamp\": \"$$(date -Iseconds)\",
          \"services\": {
            \"wiremock\": $$wiremock_health,
            \"dispatch-service\": $$dispatch_service_health
          }
        }"
        sleep 15
      done
      '                 

#volumes:
#  kafka_data:        


